services:
  service-initializer:
    profiles:
      - full
      - backend
    build:
      context: .
      dockerfile: ./Docker/service-initializer/Dockerfile
    image: sincromisor/service-initializer
    volumes:
      - ./configs/config.yml:/opt/sincromisor/configs/config.yml:rw
      - sincro-volumes:/volumes

  sincro-client:
    profiles:
      - full
      - frontend
      - webclient
    build:
      context: .
      dockerfile: ./Docker/sincro-client/Dockerfile
    image: sincromisor/sincro-client:latest
    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 443:443/udp
    volumes:
      - ./configs/Caddyfile:/etc/caddy/Caddyfile:ro
    networks:
      - sincromisor-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
    depends_on:
      service-initializer:
        condition: service_completed_successfully

  sincro-rtc:
    profiles:
      - full
      - frontend
      - rtc
    build:
      context: .
      dockerfile: ./Docker/sincro-rtc/Dockerfile
    image: sincromisor/sincro-rtc:latest
    ports:
      - 8001:8001/tcp
    volumes:
      - ./configs/config.yml:/opt/sincromisor/configs/config.yml:ro
    networks:
      - sincromisor-net
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
    depends_on:
      service-initializer:
        condition: service_completed_successfully

  speech-extractor:
    profiles:
      - full
      - backend
    build:
      context: .
      dockerfile: ./Docker/speech-extractor/Dockerfile
    image: sincromisor/speech-extractor:latest
    ports:
      - 8002:8002/tcp
    networks:
      - sincromisor-net
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
    depends_on:
      service-initializer:
        condition: service_completed_successfully

  speech-recognizer:
    profiles:
      - full
      - backend
    build:
      context: .
      dockerfile: ./Docker/speech-recognizer/Dockerfile
    image: sincromisor/speech-recognizer:latest
    ports:
      - 8003:8003/tcp
    volumes:
      - sincro-cache:/opt/sincromisor/.cache
      - sincro-voice:/opt/sincromisor/.voice
    networks:
      - sincromisor-net
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    depends_on:
      service-initializer:
        condition: service_completed_successfully

  text-processor:
    profiles:
      - full
      - backend
    build:
      context: .
      dockerfile: ./Docker/text-processor/Dockerfile
    image: sincromisor/text-processor:latest
    ports:
      - 8004:8004/tcp
    networks:
      - sincromisor-net
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
    depends_on:
      service-initializer:
        condition: service_completed_successfully

  voice-synthesizer:
    profiles:
      - full
      - backend
    build:
      context: .
      dockerfile: ./Docker/voice-synthesizer/Dockerfile
    image: sincromisor/voice-synthesizer:latest
    ports:
      - 8005:8005/tcp
    networks:
      - sincromisor-net
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
    depends_on:
      service-initializer:
        condition: service_completed_successfully

  sincro-consul-server:
    profiles:
      - full
      - backend
      - external
    image: hashicorp/consul:latest
    command: [ 'agent', '-server', '-bootstrap-expect=1', '-ui', '-client=0.0.0.0' ]
    ports:
      # https://developer.hashicorp.com/consul/docs/install/ports
      - 8300:8300
      - 8301:8301/tcp
      - 8301:8301/udp
      - 8302:8302/tcp
      - 8302:8302/udp
      - 8500:8500
      - 8501:8501
      - 8502:8502
      - 8503:8503
      - 8600:8600/tcp
      - 8600:8600/udp
    volumes:
      - consul-data:/consul/data
    networks:
      - sincromisor-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
    depends_on:
      service-initializer:
        condition: service_completed_successfully

  sincro-consul-agent:
    profiles:
      - full
      - backend
      - external
    image: hashicorp/consul:latest
    ports:
      - 8498:8500
      - 8499:8600/tcp
      - 8499:8600/udp
    env_file:
      - .env
    command: [ 'agent', '-retry-join=${SINCRO_CONSUL_SERVER_HOST}', '-client=0.0.0.0' ]
    depends_on:
      service-initializer:
        condition: service_completed_successfully
      sincro-consul-server:
        condition: service_started
    networks:
      - sincromisor-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s

  sincro-voicevox:
    profiles:
      - full
      - backend
      - external
    image: sincromisor/voicevox:latest
    build:
      context: .
      dockerfile: ./Docker/voicevox/Dockerfile
    ports:
      - 50021:50021/tcp
    networks:
      - sincromisor-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s

  sincro-voice-cache:
    profiles:
      - full
      - backend
      - external
    image: sincromisor/voice-cache:latest
    build:
      context: .
      dockerfile: ./Docker/voice-cache/Dockerfile
    ports:
      - 6379:6379/tcp
    networks:
      - sincromisor-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s

networks:
  sincromisor-net:

volumes:
  sincro-volumes:
    driver: local
    driver_opts:
      device: ./volumes
      o: bind
      type: none
  sincro-cache:
    driver: local
    driver_opts:
      device: ./volumes/sincro-cache
      o: bind
      type: none
  sincro-voice:
    driver: local
    driver_opts:
      device: ./volumes/sincro-voice
      o: bind
      type: none
  consul-data:
    driver: local
    driver_opts:
      device: ./volumes/consul-data
      o: bind
      type: none
